# This workflow runs whenever a release is created.
# The image is tagged with latest and the release version.
name: Build and Push Docker Images

on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: Release
    permissions:
      id-token: write
      contents: read
      packages: write
      attestations: write
    env:
      REGISTRY: ghcr.io
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      SLACK_CHANNEL: '#safe-utils-project'
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit
      
      - name: Slack notification
        uses: act10ns/slack@44541246747a30eb3102d87f7a4cc5471b0ffb7d # v2.1.0
        with:
          status: starting
          steps: ${{ toJson(steps) }}
          channel: ${{ env.SLACK_CHANNEL }}
          message: Starting docker build and push to ghcr for ${{ github.repository }}......
        if: always()
      
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
        with:
          platforms: 'arm64,amd64'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare repository name
        id: repo_name
        run: |
          # Convert repository name to lowercase
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "lowercase=$REPO_NAME" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6.15.0
        id: push
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ steps.repo_name.outputs.lowercase }}:latest
            ${{ env.REGISTRY }}/${{ steps.repo_name.outputs.lowercase }}:${{ github.event.release.tag_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Attest
        uses: actions/attest-build-provenance@c074443f1aee8d4aeeae555aebba3282517141b2 #v2.2.3
        id: attest
        with:
          subject-name: ${{ env.REGISTRY }}/${{ steps.repo_name.outputs.lowercase }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: Slack notification success or failure
        uses: act10ns/slack@44541246747a30eb3102d87f7a4cc5471b0ffb7d # v2.1.0
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: ${{ env.SLACK_CHANNEL }}
          message: Build and GHCR push to ${{ env.REGISTRY }}/${{ steps.repo_name.outputs.lowercase }} ${{ job.status }}!
        if: always()

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: Release
    env:
      ROLE_FOR_OIDC: "arn:aws:iam::${{ secrets.ROOT_ACCOUNT_ID }}:role/github-actions-research-account-oidc-role"
      ROLE_TO_ASSUME: "arn:aws:iam::${{ secrets.RESEARCH_ACCOUNT_ID }}:role/GithubOIDCResearchAccountRole"
      ECS_CLUSTER: "safe-utils-cluster"
      ECS_SERVICE: "safe-utils-service"
      AWS_REGION: "us-east-1"
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      SLACK_CHANNEL: '#safe-utils-project'
    permissions:
      contents: read
      id-token: write # Required for OIDC
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit
      
      - name: Slack notification
        uses: act10ns/slack@44541246747a30eb3102d87f7a4cc5471b0ffb7d # v2.1.0
        with:
          status: starting
          steps: ${{ toJson(steps) }}
          channel: ${{ env.SLACK_CHANNEL }}
          message: Starting deploy to AWS ECS......

      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up AWS credentials via OIDC and role chaining
        uses: ./.github/actions/oidc
        with:
          role-for-oidc: ${{ env.ROLE_FOR_OIDC }}
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
      
      - name: AWS ECS force new deployment
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment --region $AWS_REGION
      
      - name: Slack notification success or failure
        uses: act10ns/slack@44541246747a30eb3102d87f7a4cc5471b0ffb7d # v2.1.0
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: ${{ env.SLACK_CHANNEL }}
          message: Deploy to AWS ECS ${{ job.status }}!
        if: always()
